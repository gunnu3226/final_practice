# gitgub repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
# main 브랜치에 push가 되었을  때 실행
on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      #JDK setting - github actions에서 아용할 JDK 설정(프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # create application-dev.properties
      - name: make application.properties
        if: contains(github.ref, 'main')
        run: |
          mkdir ./src/main/resources
          cd ./src/main/resources 
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

        # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker build & push
      - name: Docker build & push
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/finalpractice .
          docker push ${{ secrets.DOCKER_USERNAME }}/finalpractice

      ## deploy to production
      - name: Deploy
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/finalpractice
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/finalpractice
            sudo docker image prune -f